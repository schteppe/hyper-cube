{"76ebaff718364146aa87cfe6efcc013a.script": {"body": "// HyperCube Script\n\n'use strict';\n\nvar setup = function(args, ctx, goo) {\n\tvar Vector3 = goo.Vector3;\n\tvar Quaternion = goo.Quaternion;\n\tvar Matrix3 = goo.Matrix3;\n\t\n\tctx.state = 'drift'; // script state\n\t\n\tctx.time = 0;\n\tctx.accumulator = 0;\n\t\n\tctx.quaternion = new Quaternion();\n\tctx.previousQuaternion = new Quaternion(); // For interpolation\n\tctx.interpolatedQuaternion = new Quaternion();\n\t\n\tctx.angularVelocity = new Vector3(args.initialVelocity);\n\t\n\tctx.torque = new Vector3();\n\tctx.addTorque = new Vector3();\n\t\n\tctx.worldAxes = [\n\t\tnew Vector3(),\n\t\tnew Vector3(),\n\t\tnew Vector3()\n\t];\n\tctx.unitAxes = [\n\t\tVector3.UNIT_X.clone(),\n\t\tVector3.UNIT_Y.clone(),\n\t\tVector3.UNIT_Z.clone()\n\t];\n\tctx.tmpAxes = [\n\t\tVector3.UNIT_X.clone(),\n\t\tVector3.UNIT_Y.clone(),\n\t\tVector3.UNIT_Z.clone()\n\t];\n\tctx.tmp = [\n\t\tVector3.UNIT_X.clone(),\n\t\tVector3.UNIT_Y.clone(),\n\t\tVector3.UNIT_Z.clone()\n\t];\n\t\n\tctx.tmpDirection = new Vector3();\n\t\n\t// The orientation to snap to\n\tctx.targetOrientation = new Matrix3();\n\t\n\t// Precompute all possible snap orientations. There are only 24 possible ones\n\tctx.orientations = [];\n\tctx.orientationTransposes = [];\n\tctx.sumMatrix = new Matrix3();\n\t\t\n\tvar vectors = ctx.vectors = [\n\t\tVector3.UNIT_X,\n\t\tVector3.UNIT_Y,\n\t\tVector3.UNIT_Z,\n\t\tVector3.UNIT_X.clone().scale(-1),\n\t\tVector3.UNIT_Y.clone().scale(-1),\n\t\tVector3.UNIT_Z.clone().scale(-1)\n\t];\n\tfor (var i = 0; i < 6; i++) {\n\t\tvar front = vectors[i];\n\t\tfor (var j = 0; j < 6; j++) {\n\t\t\tif (j === i || j - 3 === i || j + 3 === i) { continue; }\n\t\t\tvar up = vectors[j];\n\t\t\tvar orientation = new Matrix3();\n\t\t\torientation.lookAt(front, up);\n\t\t\tctx.orientations.push(orientation);\n\t\t\tctx.orientationTransposes.push(orientation.clone().transpose());\n\t\t}\n\t}\n\t\n\t// Keep track of how long the cube has wanted to sleep.\n\tctx.framesWantingToSleep = 0;\n\t\n\t// Smooth out the velocity of the touch input\n\tctx.smooth = [];\n\tctx.currentSmoothIndex = 0;\n\tfor(var i = 0; i < 5; i++){\n\t\tctx.smooth.push(new Vector3()); // x,y,weight\n\t}\n\tfunction resetSmoothing(){\n\t\tfor(var i=0; i < 5; i++){\n\t\t\tctx.smooth[i].setDirect(0, 0, 0);\n\t\t}\n\t}\n\t\n\t// Touch states\n\tctx.last = {\n\t\tx: null,\n\t\ty: null\n\t};\n\tctx.current = {\n\t\tx: null,\n\t\ty: null\n\t};\n\t\n\tctx.diff = new Vector3();\n\t\n\tctx.q = new Quaternion();\n\tctx.orientation = new Matrix3();\n\n\tctx.deviceAcceleration = new Vector3();\n\t\n\t// Listeners\n\tctx.listeners = {\n\t\ttouchstart: function(evt) {\n\t\t\tctx.state = 'active';\n\t\t\tvar dpr = ctx.world.gooRunner.renderer.devicePixelRatio;\n\t\t\tctx.last.x = ctx.current.x = evt.targetTouches[0].pageX * dpr;\n\t\t\tctx.last.y = ctx.current.y = evt.targetTouches[0].pageY * dpr;\n\t\t\tresetSmoothing();\n\t\t},\n\t\ttouchmove: function(evt) {\n\t\t\tctx.state = 'active';\n\t\t\tvar dpr = ctx.world.gooRunner.renderer.devicePixelRatio;\n\t\t\tctx.current.x = evt.targetTouches[0].pageX * dpr;\n\t\t\tctx.current.y = evt.targetTouches[0].pageY * dpr;\n\t\t},\n\t\ttouchend: function(evt) {\n\t\t\tctx.state = 'release';\n\t\t},\n\t\tmousedown: function (evt) {\n\t\t\tctx.state = 'active';\n\t\t\tvar dpr = ctx.world.gooRunner.renderer.devicePixelRatio;\n\t\t\tctx.last.x = ctx.current.x = evt.pageX * dpr;\n\t\t\tctx.last.y = ctx.current.y = evt.pageY * dpr;\n\t\t\tresetSmoothing();\n\t\t},\n\t\tmouseover: function(evt) {\n\t\t\tif (!args.hoverMode) { return; }\n\t\t\tctx.state = 'active';\n\t\t},\n\t\tmousemove: function(evt) {\n\t\t\tif (ctx.state !== 'active' && !args.hoverMode) { return; }\n\t\t\tvar dpr = ctx.world.gooRunner.renderer.devicePixelRatio;\n\t\t\tctx.current.x = evt.pageX * dpr;\n\t\t\tctx.current.y = evt.pageY * dpr;\n\t\t},\n\t\tmouseup: function(evt) {\n\t\t\tif (ctx.state === 'active') {\n\t\t\t\tctx.state = 'release';\n\t\t\t}\n\t\t},\n\t\tmouseleave: function (evt) {\n\t\t\tif (ctx.state === 'active') {\n\t\t\t\tctx.state = 'release';\n\t\t\t}\n\t\t},\n\t}\n\tfor (var key in ctx.listeners) {\n\t\tctx.domElement.addEventListener(key, ctx.listeners[key]);\n\t}\n\t\n\tctx.deviceMotion = function(evt) {\n\t\tctx.deviceAcceleration.setDirect(\n\t\t\tevt.acceleration.x,\n\t\t\tevt.acceleration.y,\n\t\t\tevt.acceleration.z\n\t\t);\n\t\tif(ctx.deviceAcceleration.lengthSquared() > args.minSpeed && ctx.state === 'passive'){\n\t\t\tctx.state = 'drift';\n\t\t}\n\t};\n\twindow.addEventListener('devicemotion', ctx.deviceMotion);\n\t\n\tctx.damping = 0;\n\tctx.targetDamping = args.damping;\n\t\n\tctx.stiffness = 0;\n\tctx.targetStiffness = args.stiffness;\n\t\n\tctx.gooListeners = {};\n\tctx.gooListeners[args.impulseChannel] = function(){\n\t\tctx.angularVelocity\n\t\t\t.addDirect(args.impulse[0], args.impulse[1], args.impulse[2])\n\t\t\t.addDirect(\n\t\t\t\targs.impulseRandom[0] * (Math.random()-0.5)*2,\n\t\t\t\targs.impulseRandom[1] * (Math.random()-0.5)*2,\n\t\t\t\targs.impulseRandom[2] * (Math.random()-0.5)*2\n\t\t\t);\n\t\tctx.state = 'drift';\n\t\tctx.framesWantingToSleep = 0;\n\t};\n\tfor (var key in ctx.gooListeners) {\n\t\tgoo.SystemBus.addListener(key, ctx.gooListeners[key]);\n\t}\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tfor (var key in ctx.listeners) {\n\t\tctx.domElement.removeEventListener(key, ctx.listeners[key]);\n\t}\n\twindow.removeEventListener('devicemotion', ctx.deviceMotion);\n\tfor (var key in ctx.gooListeners) {\n\t\tgoo.SystemBus.removeListener(key, ctx.gooListeners[key]);\n\t}\n};\n\nfunction mulMatrices (lhs, rhs, target) {\n\tvar td = target.data, ld = lhs.data;\n\tvar rd = rhs.data;\n\ttd[0] = ld[0] * rd[0];\n\ttd[1] = ld[1] * rd[1];\n\ttd[2] = ld[2] * rd[2];\n\ttd[3] = ld[3] * rd[3];\n\ttd[4] = ld[4] * rd[4];\n\ttd[5] = ld[5] * rd[5];\n\ttd[6] = ld[6] * rd[6];\n\ttd[7] = ld[7] * rd[7];\n\ttd[8] = ld[8] * rd[8];\n\treturn target;\n};\n\n// Run on each fixed time step\nvar fixedUpdate2 = function(args, ctx, goo) {\n\tvar angularVelocity = ctx.angularVelocity;\n\tvar torque = ctx.torque;\n\tvar dt = 1 / args.stepFrequency;\n    var half_dt = dt * 0.5;\n    \n\tvar q = ctx.q;\n\tvar orientation = ctx.orientation;\n\n    // Save previous for interpolation\n\tctx.previousQuaternion.copy(ctx.quaternion);\n\n\tif (ctx.state === 'active') {\n\t\t\n\t\tctx.framesWantingToSleep = 0;\n\t\tctx.diff.y = args.moveSpeed * (ctx.current.x - ctx.last.x) / ctx.viewportWidth;\n\t\tctx.diff.x = -args.moveSpeed * (ctx.current.y - ctx.last.y) / ctx.viewportHeight;\n\t\t\n\t\tintegrateQuaternion(ctx.quaternion, ctx.diff, 0.01, ctx.quaternion);\n\t\t\n\t\t// Fill velocity smoother\n\t\tctx.currentSmoothIndex = (ctx.currentSmoothIndex + 1) % ctx.smooth.length;\n\t\tctx.smooth[ctx.currentSmoothIndex].setDirect(\n\t\t\tctx.diff.x,\n\t\t\tctx.diff.y,\n\t\t\t1\n\t\t);\n\t\t\n\t\t// Reset\n\t\tctx.last.x = ctx.current.x;\n\t\tctx.last.y = ctx.current.y;\n\t\t\n\t} else if (ctx.state === 'release') {\n\t\t// Start release drift\n\t\tctx.state = 'drift';\n\t\t\n\t\tcalculateSpeed(ctx.smooth, ctx.angularVelocity);\n\t\tctx.angularVelocity.z = 0;\n\t\t\n\t} else if(ctx.state === 'drift') {\n\t\t\t\n\t\t// Find the closest target orientation\n\t\tvar minSum = 0; // Sum of 3 angles\n\n\t\tvar r = ctx.entity.transformComponent.transform.rotation;\n\t\t/*ctx.tmpAxes[0].copy(Vector3.UNIT_X);\n\t\tctx.tmpAxes[1].copy(Vector3.UNIT_Y);\n\t\tctx.tmpAxes[2].copy(Vector3.UNIT_Z);\n\t\tr.applyPost(ctx.tmpAxes[0]);\n\t\tr.applyPost(ctx.tmpAxes[1]);\n\t\tr.applyPost(ctx.tmpAxes[2]);*/\n\t\t\n\t\t// Optimize!\n/*\t\tctx.tmpAxes[0].setDirect(r.data[0], r.data[1], r.data[2]);\n\t\tctx.tmpAxes[1].setDirect(r.data[3], r.data[4], r.data[5]);\n\t\tctx.tmpAxes[2].setDirect(r.data[6], r.data[7], r.data[8]);*/\n\t\t\n\t\tvar targetOrientation = 0;\n\t\t\n\t\tvar sumMatrix = ctx.sumMatrix;\n\t\t\n\t\t// Find the closest world orientation!\n\t\tfor(var i=0; i<ctx.orientations.length; i++){\n\t\t\t\t\t\n\t\t\tvar orientation = ctx.orientations[i];\n\t\t\t\n\t\t\t// Minimize the angle between the axes\n\t\t\t\t\n\t\t\t/*\n\t\t\t// Version 1\n\t\t\tctx.tmp[0].copy(ctx.tmpAxes[0]);\n\t\t\tctx.tmp[1].copy(ctx.tmpAxes[1]);\n\t\t\tctx.tmp[2].copy(ctx.tmpAxes[2]);\n\t\t\tvar sum = \n\t\t\t\torientation.applyPost(ctx.tmp[0]).dot(ctx.unitAxes[0]) +\n\t\t\t\torientation.applyPost(ctx.tmp[1]).dot(ctx.unitAxes[1]) +\n\t\t\t\torientation.applyPost(ctx.tmp[2]).dot(ctx.unitAxes[2]);\n\t\t\t*/\n\t\t\t\n\t\t\t/*\n\t\t\t// Version 2\n\t\t\tctx.tmp[0].copy(ctx.tmpAxes[0]);\n\t\t\tctx.tmp[1].copy(ctx.tmpAxes[1]);\n\t\t\tctx.tmp[2].copy(ctx.tmpAxes[2]);\n\t\t\tvar sum = \n\t\t\t\torientation.applyPost(ctx.tmp[0]).x +\n\t\t\t\torientation.applyPost(ctx.tmp[1]).y +\n\t\t\t\torientation.applyPost(ctx.tmp[2]).z;\n\t\t\t*/\n\t\t\t\t\n\t\t\t// Version 3: not yet working\n\t\t\t// More optimization!\n\t\t\t/*var od = orientation.data;\n\t\t\tvar rd = r.data;*/\n\t\t\t//var tmp = ctx.tmpAxes;\n\t\t\t/*var sum = \n\t\t\t\tod[0] * tmp[0].x + od[3] * tmp[0].y + od[6] * tmp[0].z + \n\t\t\t\tod[1] * tmp[1].x + od[4] * tmp[1].y + od[7] * tmp[1].z + \n\t\t\t\tod[2] * tmp[2].x + od[5] * tmp[2].y + od[8] * tmp[2].z;\n\t\t\t\t*/\n/*\t\t\tvar sum = \n\t\t\t\tod[0] * rd[0] + od[3] * rd[1] + od[6] * rd[2] + \n\t\t\t\tod[1] * rd[3] + od[4] * rd[4] + od[7] * rd[5] + \n\t\t\t\tod[2] * rd[6] + od[5] * rd[7] + od[8] * rd[8];*/\n\t\t\t\n\t\t\t\t\n\t\t\t// Version 4\n\t\t\t//sumMatrix.copy(ctx.orientationTransposes[i]).mul(r);\n\t\t\tmulMatrices(ctx.orientationTransposes[i], r, sumMatrix);\n\t\t\t//Matrix3.mul(ctx.orientationTransposes[i], r, sumMatrix);\n\t\t\tvar t = sumMatrix.data;\n\t\t\tvar sum = t[0] + t[1] + t[2] + t[3] + t[4] + t[5] + t[6] + t[7] + t[8];\n\t\t\t\t\n\t\t\tif(sum > minSum){\n\t\t\t\tminSum = sum;\n\t\t\t\ttargetOrientation = i;\n\t\t\t}\n\t\t\t\t\n\t\t\t// Bail out if close enough\n\t\t\t// if(sum > 3 - args.epsilon) break; // Removed: sometimes this makes the cube rotate back-and-forth if it stays within the epsilon region\n\t\t}\n\t\t\n\t\t// Compute the snapping force\n\t\tctx.torque.setDirect(\n\t\t\tctx.deviceAcceleration.z, // This order feels okay...\n\t\t\tctx.deviceAcceleration.x,\n\t\t\tctx.deviceAcceleration.y\n\t\t);\n\t\tctx.torque.scale(args.deviceAcceleration);\n\t\t\n\t\tfor(var i = 0; i < 3; i++){\n\t\t\t\n\t\t\t// Get the local axis in world\n\t\t\tvar axis = ctx.worldAxes[i];\n\t\t\taxis\n\t\t\t\t.copy(ctx.unitAxes[i])\n\t\t\t\t.applyPost(ctx.orientations[targetOrientation])\n\t\t\t\t.applyPost(ctx.entity.transformComponent.transform.rotation);\n\t\t\t\n\t\t\tvar dot = Math.abs(axis.dot(ctx.unitAxes[i]));\n\t\t\tctx.addTorque.copy(axis).cross(ctx.unitAxes[i]);\n\t\t\t//Vector3.cross(axis, ctx.unitAxes[i], ctx.addTorque);\n\t\t\tctx.addTorque.scale(dot * ctx.stiffness);\n\t\t\tctx.torque.add(ctx.addTorque);\n\t\t}\n\t\t\n\t\t// Add torque\n\t\tangularVelocity.add(torque.scale(dt));\n\t\t\n\t\t// Apply damping\n\t\tangularVelocity.scale(\n\t\t\targs.useHardDamping ? 1 - ctx.damping : Math.pow(1.0 - ctx.damping, dt)\n\t\t);\n\t\t\n\t\t// Integrate\n\t\tintegrateQuaternion(ctx.quaternion, angularVelocity, dt, ctx.quaternion);\n\t}\n\n\tif(ctx.state === 'drift' || ctx.state === 'active'){\n\t\t// Set new entity rotation\n\t\tctx.entity.transformComponent.transform.rotation.copyQuaternion(ctx.quaternion);\n\t\tctx.entity.transformComponent.transform.update();\n\t\tctx.entity.transformComponent.setUpdated();\n\t}\n\t\n\t// Keep track of how many frames the cube was moving slowly\n\tif(ctx.state === 'drift' && angularVelocity.lengthSquared() < args.minSpeed && ctx.torque.lengthSquared() < args.minSpeed){\n\t\tctx.framesWantingToSleep++;\n\t}\n\t\n\t// Fall asleep\n\tif(ctx.state === 'drift' && ctx.framesWantingToSleep > 20){\n\t\tctx.state = 'passive';\n\t}\n\t\n\t// Ramp up damping.\n\tctx.damping = goo.MathUtils.lerp(args.dampingRamping, ctx.damping, ctx.targetDamping);\n\tctx.stiffness = goo.MathUtils.lerp(args.stiffnessRamping, ctx.stiffness, ctx.targetStiffness);\n\t\n\t// Force update world transform - so we're not one frame behind\n\tctx.entity.transformComponent.updateWorldTransform();\n\tctx.entity.transformComponent.setUpdated();\n};\n\nvar update = function(args, ctx, goo){\n\tvar fixedTimeStep = 1 / args.stepFrequency;\n    ctx.accumulator += ctx.world.tpf;\n    var substeps = 0;\n    // Do fixed steps to catch up with wall clock\n    while (ctx.accumulator >= fixedTimeStep && substeps < args.maxSubSteps) {\n        fixedUpdate2(args, ctx, goo);\n        ctx.accumulator -= fixedTimeStep;\n        substeps++;\n    }\n\n\t// fraction between last and current timestep\n    var t = (ctx.accumulator % fixedTimeStep) / fixedTimeStep;\n    \n    // Interpolate\n\tctx.interpolatedQuaternion.copy(ctx.previousQuaternion).slerp(ctx.quaternion, t);\n\t\n\t// Set new entity rotation\n\tif(ctx.state === 'drift' || ctx.state === 'active'){\n\t\tctx.entity.transformComponent.transform.rotation.copyQuaternion(ctx.interpolatedQuaternion);\n\t\tctx.entity.transformComponent.transform.update();\n\t\tctx.entity.transformComponent.setUpdated();\n\t\t\n\t\tif(args.sideChangeChannel){\n\t\t\tctx.tmpDirection\n\t\t\t\t.copy(ctx.activeCameraEntity.cameraComponent.camera._direction)\n\t\t\t\t.applyPre(ctx.entity.transformComponent.transform.rotation);\n\t\t\tvar previousVisibleSide = ctx.currentVisibleSide;\n\t\t\tfor(var i=0; i < ctx.vectors.length; i++){\n\t\t\t\tif(ctx.vectors[i].dot(ctx.tmpDirection) < -0.5){\n\t\t\t\t\tctx.currentVisibleSide = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(ctx.currentVisibleSide !== previousVisibleSide){\n\t\t\t\tgoo.SystemBus.emit(args.sideChangeChannel);\n\t\t\t\tgoo.SystemBus.emit(args.sideChangeChannel + ctx.currentVisibleSide);\n\t\t\t}\n\t\t}\n\t}\n    \n    // Update local time\n    ctx.time += ctx.world.tpf;\n};\n\nvar parameters = [{\n\tkey: 'initialVelocity',\n\ttype: 'vec3',\n\t'default': [1,9,0],\n\tdescription: 'Initial angular velocity of the cube.'\n},{\n\tkey: 'damping',\n\ttype: 'float',\n\t'default': 0.1,\n\tmin: 0,\n\tdescription: 'Friction in the rotation. More damping will stop the cube faster.'\n}, {\n\tkey: 'dampingRamping',\n\ttype: 'float',\n\t'default': 0.01,\n\tmin: 0,\n\tmax: 1,\n\tdescription: 'How fast to ramp up the damping initially. 0=dont ramp up, 1=ramp up as fast as possible.'\n}, {\n\tkey: 'useHardDamping',\n\ttype: 'boolean',\n\t'default': true,\n\tdescription: 'Hard damping will just scale the angular velocity with (1-damping). Non-hard damping will decrease the velocity with (1-damping) per second.'\n}, {\n\tkey: 'stiffness',\n\ttype: 'float',\n\t'default': 80,\n\tdescription: 'The stiffness of the springs pulling the cube into aligned position.'\n}, {\n\tkey: 'stiffnessRamping',\n\ttype: 'float',\n\t'default': 0.01,\n\tmin: 0,\n\tmax: 1,\n\tdescription: 'How fast to ramp up the stiffness initially. 0=dont ramp up, 1=ramp up as fast as possible.'\n}, {\n\tkey: 'speed',\n\ttype: 'float',\n\t'default': 0.01\n}, {\n\tkey: 'moveSpeed',\n\ttype: 'float',\n\t'default': 400\n}, {\n\tkey: 'deviceAcceleration',\n\ttype: 'float',\n\t'default': 5,\n\tdescription: 'How much to scale the device acceleration with before adding it to the cube. More will make the device movement more visible.'\n}, {\n\tkey: 'minSpeed',\n\ttype: 'float',\n\t'default': 0.05,\n\tmin: 0,\n\tdescription: 'If the speed is slower than this, the cube will fall asleep after a little while.'\n},{\n\tkey: 'stepFrequency',\n\ttype: 'float',\n\t'default': 60,\n\tmin: 1,\n\tdescription: 'How many times per second to update the physics.'\n},{\n\tkey: 'maxSubSteps',\n\ttype: 'int',\n\t'default': 30,\n\tmin: 1,\n\tdescription: 'Max physics steps to take to catch up with the wall clock.'\n},{\n\tkey: 'epsilon',\n\ttype: 'float',\n\t'default': 0.1,\n\tmin: 0\n},{\n\tkey: 'hoverMode',\n\ttype: 'boolean',\n\t'default': false\n},{\n\tkey: 'impulse',\n\ttype: 'vec3',\n\t'default': [0,20,0],\n\tdescription: 'A rotational impulse to apply when a message is sent on the impulseChannel'\n},{\n\tkey: 'impulseRandom',\n\ttype: 'vec3',\n\t'default': [0,0,0],\n\tdescription: 'A random vector to add (component-wise) to the impulse vector.'\n},{\n\tkey: 'impulseChannel',\n\ttype: 'string',\n\t'default': 'hypercube.impulse'\n},{\n\tkey: 'sideChangeChannel',\n\ttype: 'string',\n\t'default': 'hypercube.sideChange',\n\tdescription: 'An event emitted by the HyperCube when the current side was changed. A number between 0 and 5 will be appended to this event to indicate which side that was changed to.'\n}];\n\nfunction calculateSpeed(smooth, result) {\n\tvar count = 0;\n\tresult.x = result.y = 0;\n\tfor (var i = 0; i < smooth.length; i++) {\n\t\tvar item = smooth[i];\n\t\tresult.x += item.x * item.z;\n\t\tresult.y += item.y * item.z;\n\t\tcount++;\n\t}\n\tresult.divDirect(count,count,count);\n\t\n\treturn result;\n}\n\n// Integrate the orientation, see CANNON.Quaternion.prototype.integrate\nfunction integrateQuaternion(quaternion, angularVelocity, dt, target){\n    var ax = angularVelocity.x,\n        ay = angularVelocity.y,\n        az = angularVelocity.z,\n        bx = quaternion.x,\n        by = quaternion.y,\n        bz = quaternion.z,\n        bw = quaternion.w;\n    target.set(\n\t\tquaternion.x + dt * 0.5 * (ax * bw + ay * bz - az * by),\n\t\tquaternion.y + dt * 0.5 * (ay * bw + az * bx - ax * bz),\n\t\tquaternion.z + dt * 0.5 * (az * bw + ax * by - ay * bx),\n\t\tquaternion.w + dt * 0.5 * (- ax * bx - ay * by - az * bz)\n\t);\n\t\n\t// Normalize the quaternion if it's drifting\n    target.normalize();\n}", "name": "HyperCube Script", "license": "CC0", "created": "2015-04-30T06:56:37.470952+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-05-26T11:21:56.003305+00:00", "dependencies": {}, "id": "76ebaff718364146aa87cfe6efcc013a.script"}, "a2918c1bef7142e894b6a95f97ee8606.entity": {"name": "Default Camera", "license": "CC0", "created": "2015-04-30T06:56:35.897394+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-04-30T08:44:34.794130+00:00", "static": false, "components": {"camera": {"fov": 45, "lockedRatio": false, "far": 1000, "followEditorCam": false, "projectionMode": "Perspective", "near": 0.1, "aspect": 1, "size": 5}, "transform": {"rotation": [0, -180, 0], "scale": [1, 1, 1], "translation": [8.069294444476064e-17, 0, -2.341092348098755]}, "script": {"scripts": {"e6b8985a16a94045a697f38eb2f13856.scriptinstance": {"scriptRef": "GOO_ENGINE_SCRIPTS/OrbitNPanControlScript", "options": {"maxAscent": 89.95, "whenUsed": true, "zoomSpeed": 1, "clampAzimuth": false, "maxAzimuth": 270, "minZoomDistance": 1, "enabled": false, "minAzimuth": 90, "minAscent": -89, "lookAtDistance": 1.8651831150054932, "drag": 0.9, "dragButton": "Left", "panButton": "Right", "orbitSpeed": 0.005, "smoothness": 0.4, "maxZoomDistance": 1000}, "id": "e6b8985a16a94045a697f38eb2f13856.scriptinstance", "sortValue": 0, "name": "OrbitNPan"}}}}, "hidden": true, "id": "a2918c1bef7142e894b6a95f97ee8606.entity"}, "dd176e386f304e9fb2dfcccfdd4a7cd9.material": {"texturesMapping": {"AO_MAP": {"enabled": true, "textureRef": "e697b61a31014191b21174fdcb27bbcf.texture"}, "LOCAL_ENVIRONMENT": {"enabled": true, "textureRef": "a8e073af7d7443a3aae3b94fb99a2cec.texture"}}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0.5125, 0.5125, 0.5125, 1]}, "fresnel": {"enabled": true, "value": 0.58}, "reflectivity": {"enabled": true, "value": 0.63}, "materialSpecularPower": {"enabled": true, "value": 5.91}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 1, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "cs5", "license": "CC0", "created": "2015-04-30T09:11:16.982Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "CustomBlending"}, "modified": "2015-05-04T07:58:10.246489+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "dd176e386f304e9fb2dfcccfdd4a7cd9.material", "renderQueue": -1}, "02c19c5d2b0943ed9104002c1fd1514c.script": {"body": "'use strict';\n\nvar setup = function(args, ctx, goo) {\n\tctx.tap = new Tap(ctx.domElement, function() {\n\t\tif (window.gsrv) {\n\t\t\tgsrv.exit('default');\n\t\t}\n\t});\n};\n\nvar cleanup = function(args, ctx, goo) {\n\tctx.tap.destroy();\n};\n\nvar update = function(args, ctx, goo) {\n\n};\n\nvar parameters = [];\n\n// Tap helper\nfunction Tap(el, callback) {\n\tthis.el = el;\n\tthis.callback = callback;\n\tthis.limit = 10;\n\n\tthis._usesTouch = false;\n\tthis._touchdown = false;\n\tthis._moved = false;\n\tthis._x = 0;\n\tthis._y = 0;\n\n\tel.addEventListener('touchstart', this);\n\tel.addEventListener('touchmove', this);\n\tel.addEventListener('touchend', this);\n\tel.addEventListener('touchcancel', this);\n\n\tel.addEventListener('mousedown', this);\n\tel.addEventListener('mouseup', this);\n\tel.addEventListener('mousemove', this);\n\tel.addEventListener('mouseleave', this);\n}\nTap.prototype = {\n\tdestroy: function() {\n\t\tthis.el.removeEventListener('touchstart', this);\n\t\tthis.el.removeEventListener('touchmove', this);\n\t\tthis.el.removeEventListener('touchend', this);\n\t\tthis.el.removeEventListener('touchcancel', this);\n\n\t\tthis.el.removeEventListener('mousedown', this);\n\t\tthis.el.removeEventListener('mouseup', this);\n\t\tthis.el.removeEventListener('mousemove', this);\n\t\tthis.el.removeEventListener('mouseleave', this);\n\n\t\tthis.el = null;\n\t},\n\thandleEvent: function(evt) {\n\t\tswitch(evt.type) {\n\t\t\tcase 'touchstart':\n\t\t\tcase 'mousedown':\n\t\t\t\treturn this._start(evt);\n\t\t\tcase 'touchend':\n\t\t\tcase 'mouseup':\n\t\t\t\treturn this._end(evt);\n\t\t\tcase 'touchcancel':\n\t\t\tcase 'mouseleave':\n\t\t\t\treturn this._cancel(evt);\n\t\t\tcase 'touchmove':\n\t\t\tcase 'mousemove':\n\t\t\t\treturn this._move(evt);\n\t\t}\n\t},\n\t_start: function(evt) {\n\t\tthis._touchdown = true;\n\t\tif (evt.targetTouches) { this._usesTouch = true; }\n\t\tthis._x = evt.targetTouches ? evt.targetTouches[0].pageX : evt.pageX;\n\t\tthis._y = evt.targetTouches ? evt.targetTouches[0].pageY : evt.pageY;\n\t},\n\t_move: function(evt) {\n\t\tif (!this._touchdown) { return; }\n\t\tvar x = evt.targetTouches ? evt.targetTouches[0].pageX : evt.pageX;\n\t\tvar y = evt.targetTouches ? evt.targetTouches[0].pageY : evt.pageY;\n\t\tif (Math.abs(x - this._x) > this.limit || Math.abs(y - this._y) > this.limit) {\n\t\t\tthis._moved = true;\n\t\t}\n\t},\n\t_cancel: function(evt) {\n\t\tthis._touchdown = false;\n\t\tthis._moved = false;\n\t},\n\t_end: function(evt) {\n\t\tif (!this._moved) {\n\t\t\tif (!this._usesTouch || evt.type == 'touchend') {\n\t\t\t\tthis.callback();\n\t\t\t}\n\t\t}\n\t\tthis._touchdown = false;\n\t\tthis._moved = false;\n\t}\n};", "name": "Exit tracking", "license": "CC0", "created": "2015-04-30T06:56:36.395172+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-04-30T06:56:36.395172+00:00", "dependencies": {}, "id": "02c19c5d2b0943ed9104002c1fd1514c.script"}, "71f96b856ffd4d8bb48579d0ae73b894.material": {"texturesMapping": {"AO_MAP": {"enabled": true, "textureRef": "2699d6a128e14340bf34792c5ebaad3d.texture"}}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0, 0, 0, 1]}, "fresnel": {"enabled": true, "value": 0}, "reflectivity": {"enabled": true, "value": 0}, "materialSpecularPower": {"enabled": true, "value": 64}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 0, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "Material 9", "license": "CC0", "created": "2015-04-30T06:56:36.502241+00:00", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "NoBlending"}, "modified": "2015-05-04T07:51:48.528151+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "71f96b856ffd4d8bb48579d0ae73b894.material", "renderQueue": -1}, "3628ba05131543a489a4284e21160d4f.material": {"texturesMapping": {"AO_MAP": {"enabled": true, "textureRef": "283d982a94b14b49bdd76e07728cc6be.texture"}, "LOCAL_ENVIRONMENT": {"enabled": true, "textureRef": "a8e073af7d7443a3aae3b94fb99a2cec.texture"}}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0.5125, 0.5125, 0.5125, 1]}, "fresnel": {"enabled": true, "value": 0.58}, "reflectivity": {"enabled": true, "value": 0.63}, "materialSpecularPower": {"enabled": true, "value": 5.91}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 1, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "cs1", "license": "CC0", "created": "2015-04-30T07:02:24.965Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "CustomBlending"}, "modified": "2015-05-08T09:33:18.982419+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "3628ba05131543a489a4284e21160d4f.material", "renderQueue": -1}, "aa359fd890774401a0f5ae03eedc9ff7.material": {"texturesMapping": {"AO_MAP": {"enabled": true, "textureRef": "e880458255914e46ae70dbf96ee98602.texture"}, "LOCAL_ENVIRONMENT": {"enabled": true, "textureRef": "a8e073af7d7443a3aae3b94fb99a2cec.texture"}}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0.5125, 0.5125, 0.5125, 1]}, "fresnel": {"enabled": true, "value": 0.58}, "reflectivity": {"enabled": true, "value": 0.63}, "materialSpecularPower": {"enabled": true, "value": 5.91}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 1, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "cs6", "license": "CC0", "created": "2015-04-30T09:11:20.360Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "CustomBlending"}, "modified": "2015-05-04T07:58:14.042566+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "aa359fd890774401a0f5ae03eedc9ff7.material", "renderQueue": -1}, "283d982a94b14b49bdd76e07728cc6be.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "side1.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-05-04T07:56:28.532369+00:00", "dataModelVersion": 2, "modified": "2015-06-09T13:09:52.524043+00:00", "matchFileName": "side1.jpg", "repeat": [1, 1], "imageRef": "082f89407e397a7a0a6afe386827026ccd9c5c37.jpg", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "283d982a94b14b49bdd76e07728cc6be.texture", "wrapT": "Repeat"}, "6fe3d59be4f74211b4eb1e4fc91869c5.material": {"texturesMapping": {"AO_MAP": {"enabled": true, "textureRef": "64f85b7d216c4808a3c4853fb4a8660e.texture"}, "LOCAL_ENVIRONMENT": {"enabled": true, "textureRef": "a8e073af7d7443a3aae3b94fb99a2cec.texture"}}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0.5125, 0.5125, 0.5125, 1]}, "fresnel": {"enabled": true, "value": 0.58}, "reflectivity": {"enabled": true, "value": 0.63}, "materialSpecularPower": {"enabled": true, "value": 5.91}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 1, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "cs3", "license": "CC0", "created": "2015-04-30T09:11:05.087Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "CustomBlending"}, "modified": "2015-05-04T07:57:57.951494+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "6fe3d59be4f74211b4eb1e4fc91869c5.material", "renderQueue": -1}, "68e0077f97ed40b5b708f9b3c2d493cd.environment": {"sound": {"dopplerFactor": 0, "muted": false, "volume": 1, "rolloffFactor": 0.4, "reverb": 0, "maxDistance": 100}, "globalAmbient": [0, 0, 0, 0], "license": "CC0", "created": "2015-04-30T06:56:37.519900+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-05-04T07:58:49.075953+00:00", "fog": {"color": [1, 1, 1], "far": 996, "near": 0, "enabled": false}, "backgroundColor": [0, 0, 0, 1], "weather": {"snow": {"velocity": 10, "rate": 10, "enabled": false, "height": 25}}, "id": "68e0077f97ed40b5b708f9b3c2d493cd.environment", "name": "Default Environment"}, "8c850a5631a341a1b83050e34cdcf175.entity": {"name": "Side +Y", "license": "CC0", "created": "2015-04-30T06:56:37.681264+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-04-30T06:56:37.681264+00:00", "static": false, "components": {"transform": {"rotation": [90, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"57aab5f9b0d94cd28de35d096a94f088.entity": {"entityRef": "57aab5f9b0d94cd28de35d096a94f088.entity", "sortValue": 1}}}, "script": {"scripts": {"3872216da4d14ce5a0217ffe90e16a75.scriptinstance": {"scriptRef": "729a3fa1069d436d83f66801ee48f29a.script", "options": {"enabled": true}, "id": "3872216da4d14ce5a0217ffe90e16a75.scriptinstance", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "8c850a5631a341a1b83050e34cdcf175.entity"}, "6115a4c7e9234399882ffdf72ff999c4.material": {"texturesMapping": {"AO_MAP": {"enabled": true, "textureRef": "92dad7484f8e4915b49317f0d0992a9b.texture"}, "TRANSPARENCY_MAP": {"enabled": true, "textureRef": "a8e073af7d7443a3aae3b94fb99a2cec.texture"}}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0.5125, 0.5125, 0.5125, 1]}, "fresnel": {"enabled": true, "value": 0.58}, "reflectivity": {"enabled": true, "value": 0.63}, "materialSpecularPower": {"enabled": true, "value": 5.91}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 1, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "cs4", "license": "CC0", "created": "2015-04-30T09:11:11.839Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "CustomBlending"}, "modified": "2015-05-04T07:57:31.939183+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "6115a4c7e9234399882ffdf72ff999c4.material", "renderQueue": -1}, "78d95f1ad28d45fdabc0dc3ee6254ea6.entity": {"name": "Side -Y", "license": "CC0", "created": "2015-04-30T06:56:37.207946+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-04-30T06:56:37.207946+00:00", "static": false, "components": {"transform": {"rotation": [-90.00000250447816, 180.00000500895632, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"65b57a513096474387bdf3d8e20b3e56.entity": {"entityRef": "65b57a513096474387bdf3d8e20b3e56.entity", "sortValue": 1}}}, "script": {"scripts": {"3872216da4d14ce5a0217ffe90e16a75.scriptinstance": {"scriptRef": "729a3fa1069d436d83f66801ee48f29a.script", "options": {"enabled": true}, "id": "3872216da4d14ce5a0217ffe90e16a75.scriptinstance", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "78d95f1ad28d45fdabc0dc3ee6254ea6.entity"}, "ef972252e9bf4fb5a57593f44d445ea0.entity": {"name": "BgPlane", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-04-30T06:56:36.046407+00:00", "dataModelVersion": 2, "modified": "2015-05-04T07:53:11.494843+00:00", "static": false, "components": {"transform": {"translation": [0, 0.09848743677139282, 2.5], "scale": [4.693260192871094, 4.693260192871094, 4.693260192871094], "rotation": [0, -180, 0]}, "meshRenderer": {"reflectable": true, "materials": {"71f96b856ffd4d8bb48579d0ae73b894.material": {"materialRef": "71f96b856ffd4d8bb48579d0ae73b894.material", "sortValue": 0}}, "receiveShadows": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"shape": "Quad"}}, "hidden": false, "id": "ef972252e9bf4fb5a57593f44d445ea0.entity"}, "5ff4662cce0547c0bfa969db1cf9f2c7.scene": {"canvas": {"resolution": {"width": 300, "height": 300}, "mode": "Stretch", "aspect": {"width": 16, "height": 9}}, "initialCameraRef": "a2918c1bef7142e894b6a95f97ee8606.entity", "name": "HyperCube", "license": "PRIVATE", "created": "2016-10-05T09:14:03.020368+00:00", "deleted": false, "packs": {"da603f4051134d6ebca0a7cadd8b3f48.pack": {"packRef": "da603f4051134d6ebca0a7cadd8b3f48.pack", "sortValue": 0}}, "environmentRef": "68e0077f97ed40b5b708f9b3c2d493cd.environment", "dataModelVersion": 2, "originalAsset": {"version": "45290fb97d5a49e78ef0fefae2e6eac3", "id": "6c0eb08b83ad425398ec706deb6d7f32"}, "modified": "2016-10-05T09:14:20.473479+00:00", "entities": {"fa442ddbaf6b4690a7f9df97ee570e38.entity": {"entityRef": "fa442ddbaf6b4690a7f9df97ee570e38.entity", "sortValue": 7}, "a2918c1bef7142e894b6a95f97ee8606.entity": {"entityRef": "a2918c1bef7142e894b6a95f97ee8606.entity", "sortValue": 0}, "3eee23520ddf443b85a17126fed442b1.entity": {"entityRef": "3eee23520ddf443b85a17126fed442b1.entity", "sortValue": 13}, "d2d7dc622a774ed09fe5ca481c2ee9c8.entity": {"entityRef": "d2d7dc622a774ed09fe5ca481c2ee9c8.entity", "sortValue": 14}, "ef972252e9bf4fb5a57593f44d445ea0.entity": {"entityRef": "ef972252e9bf4fb5a57593f44d445ea0.entity", "sortValue": 12}}, "customAttributes": {"goo.tutorial": "/tutorials/create/simple-ad/"}, "posteffectsRef": "198e5b0e204a4ff59d0ed03ac8e0f901.posteffects", "defaultPackRef": "da603f4051134d6ebca0a7cadd8b3f48.pack", "editorCameraSettings": {"camera3d": {"spherical": [7.624305316181255, 4.825398163397442, 0.1035987755982984], "lookAtPoint": [0, 0, 0]}, "camera2d": {"spherical": [2, 3.141592653589793, 0], "lookAtPoint": [0, 0, 0]}}, "thumbnailRef": "467aff650c3ab28930bf82342d6955c10173ac85.jpg", "id": "5ff4662cce0547c0bfa969db1cf9f2c7.scene", "tags": {}, "published": "2016-03-02T11:08:37.503048+00:00"}, "2699d6a128e14340bf34792c5ebaad3d.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "bg.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-05-04T07:51:48.540879+00:00", "dataModelVersion": 2, "modified": "2015-05-04T07:51:48.540879+00:00", "repeat": [1, 1], "imageRef": "9b8384ac804b69a147290b8114ae7e25267c0ef4.jpg", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "2699d6a128e14340bf34792c5ebaad3d.texture", "wrapT": "Repeat"}, "e880458255914e46ae70dbf96ee98602.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "side6.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-05-04T07:56:41.995660+00:00", "dataModelVersion": 2, "modified": "2015-06-09T13:10:40.011120+00:00", "matchFileName": "side4.jpg", "repeat": [1, 1], "imageRef": "b6a66c6cef7c034c8bf647c5d70d87b52b822885.jpg", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "e880458255914e46ae70dbf96ee98602.texture", "wrapT": "Repeat"}, "65b57a513096474387bdf3d8e20b3e56.entity": {"name": "CubeSide 3", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-04-30T06:56:37.065247+00:00", "dataModelVersion": 2, "modified": "2015-04-30T09:12:11.677345+00:00", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 90, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"dd176e386f304e9fb2dfcccfdd4a7cd9.material": {"materialRef": "dd176e386f304e9fb2dfcccfdd4a7cd9.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"meshRef": "7696da75d14b40ff81f35abd7f8dbbc1.mesh"}}, "hidden": false, "id": "65b57a513096474387bdf3d8e20b3e56.entity"}, "64f85b7d216c4808a3c4853fb4a8660e.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "side3.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-05-04T07:56:22.604916+00:00", "dataModelVersion": 2, "modified": "2015-06-09T13:10:08.092082+00:00", "matchFileName": "side2.jpg", "repeat": [1, 1], "imageRef": "a53273bfca2c186066b328bd44a411650fa4a0fd.jpg", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "64f85b7d216c4808a3c4853fb4a8660e.texture", "wrapT": "Repeat"}, "d2ce85edc6364bacb911a2fdcbdf653f.entity": {"name": "Side -X", "license": "CC0", "created": "2015-04-30T06:56:35.992089+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-04-30T06:56:35.992089+00:00", "static": false, "components": {"transform": {"rotation": [0, 90.0001, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"8d181c7d5b3a4af29e5b6c3c02c89d54.entity": {"entityRef": "8d181c7d5b3a4af29e5b6c3c02c89d54.entity", "sortValue": 1}}}, "script": {"scripts": {"3872216da4d14ce5a0217ffe90e16a75.scriptinstance": {"scriptRef": "729a3fa1069d436d83f66801ee48f29a.script", "options": {"enabled": true}, "id": "3872216da4d14ce5a0217ffe90e16a75.scriptinstance", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "d2ce85edc6364bacb911a2fdcbdf653f.entity"}, "ea642410ead74f6f82f308f920e0be51.entity": {"name": "CubeSide 2", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-04-30T06:56:37.365105+00:00", "dataModelVersion": 2, "modified": "2015-05-06T07:13:19.987595+00:00", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 90, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"6115a4c7e9234399882ffdf72ff999c4.material": {"materialRef": "6115a4c7e9234399882ffdf72ff999c4.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"meshRef": "7696da75d14b40ff81f35abd7f8dbbc1.mesh"}}, "hidden": false, "id": "ea642410ead74f6f82f308f920e0be51.entity"}, "a8e073af7d7443a3aae3b94fb99a2cec.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "ref.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-05-04T07:57:32.110376+00:00", "dataModelVersion": 2, "modified": "2015-05-04T07:57:32.110376+00:00", "repeat": [1, 1], "imageRef": "34586cdc23c3d8fe05fa5336c960ffc209941d68.jpg", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "a8e073af7d7443a3aae3b94fb99a2cec.texture", "wrapT": "Repeat"}, "3eee23520ddf443b85a17126fed442b1.entity": {"name": "Exit tracking", "license": "CC0", "created": "2015-04-30T06:56:37.827768+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-04-30T08:44:46.368668+00:00", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, 0]}, "script": {"scripts": {"5ed75edff3ae4a839b056246e378b3fe.scriptinstance": {"scriptRef": "02c19c5d2b0943ed9104002c1fd1514c.script", "options": {"enabled": true}, "id": "5ed75edff3ae4a839b056246e378b3fe.scriptinstance", "sortValue": 0, "name": "Custom script"}}}}, "hidden": true, "id": "3eee23520ddf443b85a17126fed442b1.entity"}, "8d181c7d5b3a4af29e5b6c3c02c89d54.entity": {"name": "CubeSide 6", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-04-30T06:56:37.160979+00:00", "dataModelVersion": 2, "modified": "2015-04-30T10:44:36.829563+00:00", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 89.9999, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"3628ba05131543a489a4284e21160d4f.material": {"materialRef": "3628ba05131543a489a4284e21160d4f.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"meshRef": "7696da75d14b40ff81f35abd7f8dbbc1.mesh"}}, "hidden": false, "id": "8d181c7d5b3a4af29e5b6c3c02c89d54.entity"}, "57aab5f9b0d94cd28de35d096a94f088.entity": {"name": "CubeSide 4", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-04-30T06:56:37.629991+00:00", "dataModelVersion": 2, "modified": "2015-04-30T09:11:59.527658+00:00", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 90.00000250447816, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"03f79d5804264e4cb9c84baeb505649b.material": {"materialRef": "03f79d5804264e4cb9c84baeb505649b.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"meshRef": "7696da75d14b40ff81f35abd7f8dbbc1.mesh"}}, "hidden": false, "id": "57aab5f9b0d94cd28de35d096a94f088.entity"}, "8af89a9b43a44ac29fd7019ac5c39683.entity": {"name": "Side -Z", "license": "CC0", "created": "2015-04-30T06:56:36.551827+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-05-06T07:13:54.572054+00:00", "static": false, "components": {"transform": {"rotation": [0, 0, 0], "scale": [1, 1, 1], "translation": [0, 0, -3.074708e-17], "children": {"707e751f08b34f4e9540b8b20d2990b0.entity": {"entityRef": "707e751f08b34f4e9540b8b20d2990b0.entity", "sortValue": 1}}}, "script": {"scripts": {"3872216da4d14ce5a0217ffe90e16a75.scriptinstance": {"scriptRef": "729a3fa1069d436d83f66801ee48f29a.script", "options": {"enabled": true}, "id": "3872216da4d14ce5a0217ffe90e16a75.scriptinstance", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "8af89a9b43a44ac29fd7019ac5c39683.entity"}, "7696da75d14b40ff81f35abd7f8dbbc1.mesh": {"name": "", "license": "CC0", "created": "2015-04-30T06:56:36.199265+00:00", "boundingVolume": {"max": [0.5, 0.4926784038543701, 0.4926784038543701], "type": "BoundingBox", "min": [0.4892269968986511, -0.4926784038543701, -0.4926784038543701]}, "modified": "2015-04-30T06:56:36.199265+00:00", "dataModelVersion": 2, "deleted": false, "vertexCount": 36, "indexModes": ["Triangles"], "indices": [0, 150, "uint8"], "attributes": {"POSITION": {"dimensions": 3, "value": [152, 108, "float32"]}, "TEXCOORD0": {"dimensions": 2, "value": [584, 72, "float32"]}, "TANGENT": {"dimensions": 4, "value": [872, 144, "float32"]}, "NORMAL": {"dimensions": 3, "value": [1448, 108, "float32"]}}, "indexLengths": [150], "type": "Mesh", "id": "7696da75d14b40ff81f35abd7f8dbbc1.mesh", "binaryRef": "2273f6e8eef9d47a3c54c5a3a948bf44255dc57e.bin"}, "729a3fa1069d436d83f66801ee48f29a.script": {"body": "// Y up script\n\n'use strict';\n\n// Rotate locally around Z until world Y is as \"up\" as it can\n\nvar setup = function(args, ctx, goo) {\n\tctx.eyeToEntity = new goo.Vector3();\n\t\n\tctx.worldX = new goo.Vector3(1,0,0);\n\tctx.worldY = new goo.Vector3(0,1,0);\n\tctx.worldZ = new goo.Vector3(0,0,1);\n\tctx.worldY1 = new goo.Vector3(0,1,0);\n\t\n\tctx.UNIT_X = goo.Vector3.UNIT_X;\n\tctx.UNIT_Y = goo.Vector3.UNIT_Y;\n\tctx.UNIT_Z = goo.Vector3.UNIT_Z;\n\tctx.NEG_UNIT_X = goo.Vector3.UNIT_X.clone().scale(-1);\n\tctx.NEG_UNIT_Y = goo.Vector3.UNIT_Y.clone().scale(-1);\n\tctx.NEG_UNIT_Z = goo.Vector3.UNIT_Z.clone().scale(-1);\n};\n\nvar cleanup = function(args, ctx, goo) {\n\n};\n\nvar update = function(args, ctx, goo) {\n\t\n\tctx.entity.transformComponent.updateWorldTransform();\n\tctx.entity.transformComponent.setUpdated();\n\t\n\tvar eyeToEntity = ctx.eyeToEntity\n\t\t.copy(ctx.entity.transformComponent.worldTransform.translation)\n\t\t.sub(ctx.activeCameraEntity.transformComponent.worldTransform.translation);\n\t\n\tvar worldZ = ctx.worldZ.copy(goo.Vector3.UNIT_Z);\n\tworldZ.applyPost(ctx.entity.transformComponent.worldTransform.rotation);\n\t\n\tworldZ.applyPostVector(ctx.activeCameraEntity.cameraComponent.camera.getViewProjectionMatrix());\n\tif (worldZ.z < 0) {\n\t\treturn;\n\t}\n\t\n\t// Get the current world Y\n\tvar worldY1 = ctx.worldY1;\n\tworldY1.copy(goo.Vector3.UNIT_Y);\n\tvar minDot = 0;\n\t\n\tvar minIndex = -1;\n\t\n\tfor(var i = 0; i < 4; i++){\n\t\tvar r = ctx.entity.transformComponent.worldTransform.rotation;\n\t\t\n\t\t/*\n\t\tworldY1.copy(goo.Vector3.UNIT_Y);\n\t\tr.applyPost(worldY1);\n\t\t*/\n\t\t//worldY1.setDirect(r.data[1], r.data[4], r.data[7]);\n\t\t\n\t\tvar dot = r.data[4];// worldY1.y; // goo.Vector3.UNIT_Y.dot(worldY1); // optimize!\n\t\t\n\t\tif(dot > minDot){\n\t\t\tminIndex = i;\n\t\t\tminDot = dot;\n\t\t}\n\t\t\n\t\tctx.entity.transformComponent.transform.rotation.rotateZ(Math.PI / 2);\n\t\tctx.entity.transformComponent.transform.update();\n\t\tctx.entity.transformComponent.updateWorldTransform();\n\t}\n\t\n\tctx.entity.transformComponent.transform.rotation.rotateZ(minIndex * Math.PI / 2);\n\t\n\t// The following code could be an optimization, though the scene needs restructuring for it to work.\n\t/*var up;\n\tif (worldX.y > 0) {\n\t\tif (worldX.y > worldY.y) {\n\t\t\tup = ctx.UNIT_X;\n\t\t} else {\n\t\t\tup = ctx.UNIT_Y;\n\t\t}\n\t} else {\n\t\tif (worldX.y > worldY.y) {\n\t\t\tup = ctx.NEG_UNIT_X;\n\t\t} else {\n\t\t\tup = ctx.NEG_UNIT_Y;\n\t\t}\n\tvar childEntity = ctx.entity.transformComponent.children[0].entity;\n\tchildEntity.transformComponent.transform.rotation.lookAt(ctx.NEG_UNIT_Z, up);\n\tchildEntity.transformComponent.transform.update();\n\tchildEntity.transformComponent.setUpdated();\n\tchildEntity.transformComponent.updateWorldTransform();\n\t}*/\n\n\t// Force update the transform to not get one frame behind\n\tctx.entity.transformComponent.transform.update();\n\tctx.entity.transformComponent.setUpdated();\n\tctx.entity.transformComponent.updateWorldTransform();\n\tctx.entity.transformComponent.setUpdated();\n};\n\nvar parameters = [];", "name": "Y up script", "license": "CC0", "created": "2015-04-30T06:56:36.143075+00:00", "deleted": false, "dataModelVersion": 2, "modified": "2015-05-06T07:10:37.485284+00:00", "dependencies": {}, "id": "729a3fa1069d436d83f66801ee48f29a.script"}, "fa442ddbaf6b4690a7f9df97ee570e38.entity": {"name": "HyperCube", "license": "CC0", "created": "2015-04-30T06:56:37.417670+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-05-26T11:25:20.832188+00:00", "static": false, "components": {"transform": {"rotation": [0, -90, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"d2ce85edc6364bacb911a2fdcbdf653f.entity": {"entityRef": "d2ce85edc6364bacb911a2fdcbdf653f.entity", "sortValue": 10}, "8af89a9b43a44ac29fd7019ac5c39683.entity": {"entityRef": "8af89a9b43a44ac29fd7019ac5c39683.entity", "sortValue": 8}, "8c850a5631a341a1b83050e34cdcf175.entity": {"entityRef": "8c850a5631a341a1b83050e34cdcf175.entity", "sortValue": 12}, "b69e1a06b1fb4902a473ce09dcb06e62.entity": {"entityRef": "b69e1a06b1fb4902a473ce09dcb06e62.entity", "sortValue": 9}, "78d95f1ad28d45fdabc0dc3ee6254ea6.entity": {"entityRef": "78d95f1ad28d45fdabc0dc3ee6254ea6.entity", "sortValue": 13}, "5c6c70aa98344a408f5432fe0e3b516b.entity": {"entityRef": "5c6c70aa98344a408f5432fe0e3b516b.entity", "sortValue": 11}}}, "script": {"scripts": {"04724a54d35146639aef2ab3631a3c00.scriptinstance": {"scriptRef": "76ebaff718364146aa87cfe6efcc013a.script", "options": {"impulseChannel": "hypercube.impulse", "stepFrequency": 60, "speed": 0.01, "impulse": [0, 20, 0], "moveSpeed": 400, "epsilon": 0.1, "sideChangeChannel": "hypercube.sideChange", "enabled": true, "dampingRamping": 0.01, "impulseRandom": [0, 0, 0], "damping": 0.1, "stiffness": 80, "stiffnessRamping": 0.01, "initialVelocity": [1, 9, 0], "maxSubSteps": 30, "deviceAcceleration": 5, "hoverMode": false, "useHardDamping": true, "minSpeed": 0.05}, "id": "04724a54d35146639aef2ab3631a3c00.scriptinstance", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "fa442ddbaf6b4690a7f9df97ee570e38.entity"}, "92dad7484f8e4915b49317f0d0992a9b.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "side4.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-05-04T07:56:00.198501+00:00", "dataModelVersion": 2, "modified": "2015-06-09T13:10:24.218111+00:00", "matchFileName": "side3.jpg", "repeat": [1, 1], "imageRef": "5f13bff71745d6722a45274fe0cd8646b0ad77c5.jpg", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "92dad7484f8e4915b49317f0d0992a9b.texture", "wrapT": "Repeat"}, "b69e1a06b1fb4902a473ce09dcb06e62.entity": {"name": "Side +Z", "license": "CC0", "created": "2015-04-30T06:56:37.314285+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-05-06T07:11:46.497322+00:00", "static": false, "components": {"transform": {"rotation": [0, -180.0001, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"878fdaf65e7b4091966d07ae8324d5e1.entity": {"entityRef": "878fdaf65e7b4091966d07ae8324d5e1.entity", "sortValue": 1}}}, "script": {"scripts": {"3872216da4d14ce5a0217ffe90e16a75.scriptinstance": {"scriptRef": "729a3fa1069d436d83f66801ee48f29a.script", "options": {"enabled": true}, "id": "3872216da4d14ce5a0217ffe90e16a75.scriptinstance", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "b69e1a06b1fb4902a473ce09dcb06e62.entity"}, "198e5b0e204a4ff59d0ed03ac8e0f901.posteffects": {"name": "Post effects", "license": "CC0", "created": "2015-04-30T06:56:36.916055+00:00", "deleted": false, "dataModelVersion": 2, "posteffects": {}, "modified": "2015-04-30T06:56:36.916055+00:00", "id": "198e5b0e204a4ff59d0ed03ac8e0f901.posteffects"}, "e697b61a31014191b21174fdcb27bbcf.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "side5.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-05-04T07:56:34.092908+00:00", "dataModelVersion": 2, "modified": "2015-06-09T13:11:15.778839+00:00", "matchFileName": "side6.jpg", "repeat": [1, 1], "imageRef": "450ec58340779bd8854931537861fad09c56398b.jpg", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "e697b61a31014191b21174fdcb27bbcf.texture", "wrapT": "Repeat"}, "a4d84382402945ceb7da7e156d9e7ae9.texture": {"wrapS": "Repeat", "minFilter": "Trilinear", "name": "side2.jpg", "license": "CC0", "flipY": true, "deleted": false, "magFilter": "Bilinear", "created": "2015-05-04T07:56:15.132015+00:00", "dataModelVersion": 2, "modified": "2015-06-09T13:10:56.375342+00:00", "matchFileName": "side5.jpg", "repeat": [1, 1], "imageRef": "50dd6b4e14959fdb60bd385e9f361ad281b32864.jpg", "anisotropy": 1, "offset": [0, 0], "generateMipmaps": true, "id": "a4d84382402945ceb7da7e156d9e7ae9.texture", "wrapT": "Repeat"}, "707e751f08b34f4e9540b8b20d2990b0.entity": {"name": "CubeSide 7", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-04-30T06:56:36.863964+00:00", "dataModelVersion": 2, "modified": "2015-04-30T09:12:15.327567+00:00", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 90, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"aa359fd890774401a0f5ae03eedc9ff7.material": {"materialRef": "aa359fd890774401a0f5ae03eedc9ff7.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"meshRef": "7696da75d14b40ff81f35abd7f8dbbc1.mesh"}}, "hidden": false, "id": "707e751f08b34f4e9540b8b20d2990b0.entity"}, "d2d7dc622a774ed09fe5ca481c2ee9c8.entity": {"name": "Light", "license": "CC0", "created": "2015-04-30T09:06:07.731Z", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-04-30T09:33:57.864143+00:00", "static": false, "components": {"light": {"direction": [0, 0, 0], "shadowCaster": false, "color": [1, 1, 1, 1], "intensity": 0.4, "range": 60, "specularIntensity": 1, "penumbra": 5, "angle": 30, "type": "PointLight", "shadowSettings": {"fov": 30, "darkness": 1, "far": 60, "near": 1, "resolution": [256, 256], "shadowType": "Basic", "size": 100}}, "transform": {"translation": [0.5901156067848206, 0.4360489547252655, -1.1154450178146362], "scale": [1, 1, 1], "rotation": [0, 0, 0]}}, "hidden": false, "id": "d2d7dc622a774ed09fe5ca481c2ee9c8.entity"}, "5c6c70aa98344a408f5432fe0e3b516b.entity": {"name": "Side +X", "license": "CC0", "created": "2015-04-30T06:56:36.297499+00:00", "deleted": false, "tags": {}, "dataModelVersion": 2, "modified": "2015-05-06T07:13:05.331081+00:00", "static": false, "components": {"transform": {"rotation": [0, -90, 0], "scale": [1, 1, 1], "translation": [0, 0, 0], "children": {"ea642410ead74f6f82f308f920e0be51.entity": {"entityRef": "ea642410ead74f6f82f308f920e0be51.entity", "sortValue": 1}}}, "script": {"scripts": {"3872216da4d14ce5a0217ffe90e16a75.scriptinstance": {"scriptRef": "729a3fa1069d436d83f66801ee48f29a.script", "options": {"enabled": true}, "id": "3872216da4d14ce5a0217ffe90e16a75.scriptinstance", "sortValue": 0, "name": "Custom script"}}}}, "hidden": false, "id": "5c6c70aa98344a408f5432fe0e3b516b.entity"}, "878fdaf65e7b4091966d07ae8324d5e1.entity": {"name": "CubeSide 5", "license": "CC0", "tags": {}, "deleted": false, "created": "2015-04-30T06:56:36.096002+00:00", "dataModelVersion": 2, "modified": "2015-05-06T07:11:50.296631+00:00", "static": false, "components": {"transform": {"translation": [0, 0, 0], "scale": [1, 1, 1], "rotation": [0, 89.9999, 0]}, "meshRenderer": {"receiveShadows": true, "materials": {"6fe3d59be4f74211b4eb1e4fc91869c5.material": {"materialRef": "6fe3d59be4f74211b4eb1e4fc91869c5.material", "sortValue": 0}}, "reflectable": true, "cullMode": "Dynamic", "castShadows": true}, "meshData": {"meshRef": "7696da75d14b40ff81f35abd7f8dbbc1.mesh"}}, "hidden": false, "id": "878fdaf65e7b4091966d07ae8324d5e1.entity"}, "03f79d5804264e4cb9c84baeb505649b.material": {"texturesMapping": {"AO_MAP": {"enabled": true, "textureRef": "a4d84382402945ceb7da7e156d9e7ae9.texture"}, "LOCAL_ENVIRONMENT": {"enabled": true, "textureRef": "a8e073af7d7443a3aae3b94fb99a2cec.texture"}}, "flat": false, "cullState": {"frontFace": "CCW", "enabled": true, "cullFace": "Back"}, "uniforms": {"opacity": {"enabled": false, "value": 1}, "refractivity": {"enabled": false, "value": 0}, "materialAmbient": {"enabled": true, "value": [1, 1, 1, 1]}, "materialSpecular": {"enabled": true, "value": [0.5125, 0.5125, 0.5125, 1]}, "fresnel": {"enabled": true, "value": 0.58}, "reflectivity": {"enabled": true, "value": 0.63}, "materialSpecularPower": {"enabled": true, "value": 5.91}, "materialDiffuse": {"enabled": true, "value": [0, 0, 0, 1]}, "vertexColorAmount": {"enabled": true, "value": 1}, "materialEmissive": {"enabled": true, "value": [0, 0, 0, 1]}, "discardThreshold": {"enabled": true, "value": 0.1}, "normalMultiplier": {"enabled": true, "value": 1}, "etaRatio": {"enabled": true, "value": -0.5}, "reflectionType": 1, "wrapSettings": {"enabled": true, "value": [0, 0]}}, "name": "cs2", "license": "CC0", "created": "2015-04-30T09:10:29.847Z", "deleted": false, "wireframe": false, "dataModelVersion": 2, "blendState": {"blendEquation": "AddEquation", "blendSrc": "SrcAlphaFactor", "blendDst": "OneMinusSrcAlphaFactor", "blending": "CustomBlending"}, "modified": "2015-05-04T07:57:53.838210+00:00", "dualTransparency": false, "depthState": {"write": true, "enabled": true}, "shaderRef": "GOO_ENGINE_SHADERS/uber", "id": "03f79d5804264e4cb9c84baeb505649b.material", "renderQueue": -1}}